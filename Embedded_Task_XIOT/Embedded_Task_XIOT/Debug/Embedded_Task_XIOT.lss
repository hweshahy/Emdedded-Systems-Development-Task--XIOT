
Embedded_Task_XIOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000398  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000398  0000042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800080  00800080  0000044c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc2  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000887  00000000  00000000  0000159a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a41  00000000  00000000  00001e21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a8  00000000  00000000  00002864  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000541  00000000  00000000  00002c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c35  00000000  00000000  0000314d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003d82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 38       	cpi	r26, 0x81	; 129
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8f 01 	call	0x31e	; 0x31e <main>
  8a:	0c 94 ca 01 	jmp	0x394	; 0x394 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC0_init>:
	ADCSRA|=(1<<ADEN)|0x07;
}
void ADC1_init(){
	
	ADMUX=0x81;
	ADCSRA|=(1<<ADEN)|0x07;
  92:	80 e8       	ldi	r24, 0x80	; 128
  94:	87 b9       	out	0x07, r24	; 7
  96:	86 b1       	in	r24, 0x06	; 6
  98:	87 68       	ori	r24, 0x87	; 135
  9a:	86 b9       	out	0x06, r24	; 6
  9c:	08 95       	ret

0000009e <ADC_read>:

}
uint32_t ADC_read(){
	
	ADCSRA |= (1<<ADSC);
  9e:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & (1<<ADIF)));
  a0:	34 99       	sbic	0x06, 4	; 6
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <ADC_read+0x2>
	return (ADCL | (ADCH << 8));
  a4:	64 b1       	in	r22, 0x04	; 4
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	78 2b       	or	r23, r24
  ac:	07 2e       	mov	r0, r23
  ae:	00 0c       	add	r0, r0
  b0:	88 0b       	sbc	r24, r24
  b2:	99 0b       	sbc	r25, r25
}
  b4:	08 95       	ret

000000b6 <lcd_send_pulse_for_update_data_or_cmd>:



void lcd_write_number(uint32_t data){
	IntToString(data,txt);
	lcd_write_txt(txt);
  b6:	c3 9a       	sbi	0x18, 3	; 24
  b8:	8f ec       	ldi	r24, 0xCF	; 207
  ba:	97 e0       	ldi	r25, 0x07	; 7
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_send_pulse_for_update_data_or_cmd+0x6>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcd_send_pulse_for_update_data_or_cmd+0xc>
  c2:	00 00       	nop
  c4:	c3 98       	cbi	0x18, 3	; 24
  c6:	8f ec       	ldi	r24, 0xCF	; 207
  c8:	97 e0       	ldi	r25, 0x07	; 7
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_send_pulse_for_update_data_or_cmd+0x14>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcd_send_pulse_for_update_data_or_cmd+0x1a>
  d0:	00 00       	nop
  d2:	08 95       	ret

000000d4 <lcd_write>:
  d4:	cf 93       	push	r28
  d6:	c8 2f       	mov	r28, r24
  d8:	88 23       	and	r24, r24
  da:	14 f0       	brlt	.+4      	; 0xe0 <lcd_write+0xc>
  dc:	df 98       	cbi	0x1b, 7	; 27
  de:	01 c0       	rjmp	.+2      	; 0xe2 <lcd_write+0xe>
  e0:	df 9a       	sbi	0x1b, 7	; 27
  e2:	c6 fd       	sbrc	r28, 6
  e4:	02 c0       	rjmp	.+4      	; 0xea <lcd_write+0x16>
  e6:	de 98       	cbi	0x1b, 6	; 27
  e8:	01 c0       	rjmp	.+2      	; 0xec <lcd_write+0x18>
  ea:	de 9a       	sbi	0x1b, 6	; 27
  ec:	c5 fd       	sbrc	r28, 5
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <lcd_write+0x20>
  f0:	dd 98       	cbi	0x1b, 5	; 27
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <lcd_write+0x22>
  f4:	dd 9a       	sbi	0x1b, 5	; 27
  f6:	c4 fd       	sbrc	r28, 4
  f8:	02 c0       	rjmp	.+4      	; 0xfe <lcd_write+0x2a>
  fa:	dc 98       	cbi	0x1b, 4	; 27
  fc:	01 c0       	rjmp	.+2      	; 0x100 <lcd_write+0x2c>
  fe:	dc 9a       	sbi	0x1b, 4	; 27
 100:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_send_pulse_for_update_data_or_cmd>
 104:	c3 fd       	sbrc	r28, 3
 106:	02 c0       	rjmp	.+4      	; 0x10c <lcd_write+0x38>
 108:	df 98       	cbi	0x1b, 7	; 27
 10a:	01 c0       	rjmp	.+2      	; 0x10e <lcd_write+0x3a>
 10c:	df 9a       	sbi	0x1b, 7	; 27
 10e:	c2 fd       	sbrc	r28, 2
 110:	02 c0       	rjmp	.+4      	; 0x116 <lcd_write+0x42>
 112:	de 98       	cbi	0x1b, 6	; 27
 114:	01 c0       	rjmp	.+2      	; 0x118 <lcd_write+0x44>
 116:	de 9a       	sbi	0x1b, 6	; 27
 118:	c1 fd       	sbrc	r28, 1
 11a:	02 c0       	rjmp	.+4      	; 0x120 <lcd_write+0x4c>
 11c:	dd 98       	cbi	0x1b, 5	; 27
 11e:	01 c0       	rjmp	.+2      	; 0x122 <lcd_write+0x4e>
 120:	dd 9a       	sbi	0x1b, 5	; 27
 122:	c0 fd       	sbrc	r28, 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <lcd_write+0x56>
 126:	dc 98       	cbi	0x1b, 4	; 27
 128:	01 c0       	rjmp	.+2      	; 0x12c <lcd_write+0x58>
 12a:	dc 9a       	sbi	0x1b, 4	; 27
 12c:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_send_pulse_for_update_data_or_cmd>
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <lcd_write_cmd>:
 134:	c1 98       	cbi	0x18, 1	; 24
 136:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_write>
 13a:	08 95       	ret

0000013c <lcd_write_char>:
 13c:	c1 9a       	sbi	0x18, 1	; 24
 13e:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_write>
 142:	08 95       	ret

00000144 <lcd_write_txt>:
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	ec 01       	movw	r28, r24
 14a:	88 81       	ld	r24, Y
 14c:	88 23       	and	r24, r24
 14e:	31 f0       	breq	.+12     	; 0x15c <lcd_write_txt+0x18>
 150:	21 96       	adiw	r28, 0x01	; 1
 152:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_write_char>
 156:	89 91       	ld	r24, Y+
 158:	81 11       	cpse	r24, r1
 15a:	fb cf       	rjmp	.-10     	; 0x152 <lcd_write_txt+0xe>
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <lcd_init>:
	}
	
	
}
void lcd_init(){
	INIT_PORT;
 162:	8a b3       	in	r24, 0x1a	; 26
 164:	80 6f       	ori	r24, 0xF0	; 240
 166:	8a bb       	out	0x1a, r24	; 26
 168:	87 b3       	in	r24, 0x17	; 23
 16a:	8e 60       	ori	r24, 0x0E	; 14
 16c:	87 bb       	out	0x17, r24	; 23
	// To clear Data on the LCD at Startup
	D7(0);D6(0);D5(1);D4(1);
 16e:	df 98       	cbi	0x1b, 7	; 27
 170:	de 98       	cbi	0x1b, 6	; 27
 172:	dd 9a       	sbi	0x1b, 5	; 27
 174:	dc 9a       	sbi	0x1b, 4	; 27
	lcd_send_pulse_for_update_data_or_cmd();
 176:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_send_pulse_for_update_data_or_cmd>
	D7(0);D6(0);D5(1);D4(0);
 17a:	df 98       	cbi	0x1b, 7	; 27
 17c:	de 98       	cbi	0x1b, 6	; 27
 17e:	dd 9a       	sbi	0x1b, 5	; 27
 180:	dc 98       	cbi	0x1b, 4	; 27
	lcd_send_pulse_for_update_data_or_cmd();
 182:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_send_pulse_for_update_data_or_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	8f e0       	ldi	r24, 0x0F	; 15
 188:	97 e2       	ldi	r25, 0x27	; 39
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <lcd_init+0x28>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <lcd_init+0x2e>
 190:	00 00       	nop
	_delay_ms(5);
    ///////////
	Rw(0);
 192:	c2 98       	cbi	0x18, 2	; 24
	lcd_write_cmd(0x2);
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_write_cmd>
	lcd_write_cmd(0x28);  // 4data line
 19a:	88 e2       	ldi	r24, 0x28	; 40
 19c:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_write_cmd>
	lcd_write_cmd(0x01);
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_write_cmd>
	lcd_write_cmd(0x0c);  // display on cursor off
 1a6:	8c e0       	ldi	r24, 0x0C	; 12
 1a8:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_write_cmd>
	lcd_write_cmd(0x06);  // increment cursor right
 1ac:	86 e0       	ldi	r24, 0x06	; 6
 1ae:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_write_cmd>
	lcd_write_cmd(0x80);  // set courser at the beginning of the first line
 1b2:	80 e8       	ldi	r24, 0x80	; 128
 1b4:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_write_cmd>
 1b8:	8f e3       	ldi	r24, 0x3F	; 63
 1ba:	9c e9       	ldi	r25, 0x9C	; 156
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_init+0x5a>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <lcd_init+0x60>
 1c2:	00 00       	nop
 1c4:	08 95       	ret

000001c6 <press_function>:
    {	
		//another functions in the system
	}
}
//required function
char press_function(){
 1c6:	cf 93       	push	r28
	
	char checking_global_interrupt=0;
	//checking if the function is in use or not
	if(Shared_resource_protection)//if it used it return zero
 1c8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 1cc:	81 11       	cpse	r24, r1
 1ce:	34 c0       	rjmp	.+104    	; 0x238 <press_function+0x72>
	{
		return 0;
	}
	
	//blocking other functions from enter using it at the same time
	Shared_resource_protection=1;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
	
	//critical section disabling the interrupts
	if(READBIT(SREG,7))
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	07 fe       	sbrs	r0, 7
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <press_function+0x1c>
	{
		cli();
 1dc:	f8 94       	cli
	}
}
//required function
char press_function(){
	
	char checking_global_interrupt=0;
 1de:	c0 e0       	ldi	r28, 0x00	; 0
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <press_function+0x1e>
	{
		cli();
	}
	else
	{
		checking_global_interrupt=1;
 1e2:	c1 e0       	ldi	r28, 0x01	; 1
	}
	//reading the input to know if it is falling 
	if(READBIT(PIND,2))
 1e4:	82 9b       	sbis	0x10, 2	; 16
 1e6:	1a c0       	rjmp	.+52     	; 0x21c <press_function+0x56>
	{
		//printing "pressed" on the monitor and toggling the led 
		lcd_write_cmd(0x80);//this command to put the courser of the LCD on the start of the first line
 1e8:	80 e8       	ldi	r24, 0x80	; 128
 1ea:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_write_cmd>
		lcd_write_txt("Pressed ");//printing "pressed"
 1ee:	80 e6       	ldi	r24, 0x60	; 96
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_write_txt>
		lcd_write_cmd(0xc5);//this command to put the courser of the LCD on the start of the second line
 1f6:	85 ec       	ldi	r24, 0xC5	; 197
 1f8:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_write_cmd>
		TOGBIT(PORTD,5);
 1fc:	92 b3       	in	r25, 0x12	; 18
 1fe:	80 e2       	ldi	r24, 0x20	; 32
 200:	89 27       	eor	r24, r25
 202:	82 bb       	out	0x12, r24	; 18
		
		//printing "on" or "off" on the monitor
		if(READBIT(PORTD,5))
 204:	95 9b       	sbis	0x12, 5	; 18
 206:	05 c0       	rjmp	.+10     	; 0x212 <press_function+0x4c>
		{
			lcd_write_txt("ON ");
 208:	89 e6       	ldi	r24, 0x69	; 105
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_write_txt>
 210:	0c c0       	rjmp	.+24     	; 0x22a <press_function+0x64>
		}
		else
		{
			lcd_write_txt("OFF");
 212:	8b e7       	ldi	r24, 0x7B	; 123
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_write_txt>
 21a:	07 c0       	rjmp	.+14     	; 0x22a <press_function+0x64>

	}
	//in the raising edge
	else
	{
		lcd_write_cmd(0x80);//this command to put the courser of the LCD on the start of the first line
 21c:	80 e8       	ldi	r24, 0x80	; 128
 21e:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_write_cmd>
		lcd_write_txt("        ");//removing "pressed" from the LCD
 222:	8d e6       	ldi	r24, 0x6D	; 109
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_write_txt>
	}
	//releasing the function for other calls
	Shared_resource_protection=0;
 22a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__data_end>
	
	//enabling the interrupt flag
	if(!checking_global_interrupt)
 22e:	c1 11       	cpse	r28, r1
 230:	05 c0       	rjmp	.+10     	; 0x23c <press_function+0x76>
	{
	sei();
 232:	78 94       	sei
	}
		return 1;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	03 c0       	rjmp	.+6      	; 0x23e <press_function+0x78>
	
	char checking_global_interrupt=0;
	//checking if the function is in use or not
	if(Shared_resource_protection)//if it used it return zero
	{
		return 0;
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	01 c0       	rjmp	.+2      	; 0x23e <press_function+0x78>
	//enabling the interrupt flag
	if(!checking_global_interrupt)
	{
	sei();
	}
		return 1;
 23c:	81 e0       	ldi	r24, 0x01	; 1
}
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <__vector_7>:


//timer1 interrupt handler
ISR(TIMER1_COMPA_vect)
{
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	2f 93       	push	r18
 24e:	3f 93       	push	r19
 250:	4f 93       	push	r20
 252:	5f 93       	push	r21
 254:	6f 93       	push	r22
 256:	7f 93       	push	r23
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	af 93       	push	r26
 25e:	bf 93       	push	r27
 260:	ef 93       	push	r30
 262:	ff 93       	push	r31
	int data=(ADC_read())*100/1024;//assume the ADC has 10 bits and temperature range from 0 to 100
 264:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_read>
 268:	9b 01       	movw	r18, r22
 26a:	ac 01       	movw	r20, r24
	UART_tx(((char)data));
 26c:	a4 e6       	ldi	r26, 0x64	; 100
 26e:	b0 e0       	ldi	r27, 0x00	; 0
 270:	0e 94 b0 01 	call	0x360	; 0x360 <__muluhisi3>
 274:	dc 01       	movw	r26, r24
 276:	cb 01       	movw	r24, r22
 278:	07 2e       	mov	r0, r23
 27a:	7a e0       	ldi	r23, 0x0A	; 10
 27c:	b6 95       	lsr	r27
 27e:	a7 95       	ror	r26
 280:	97 95       	ror	r25
 282:	87 95       	ror	r24
 284:	7a 95       	dec	r23
 286:	d1 f7       	brne	.-12     	; 0x27c <__vector_7+0x3a>
 288:	70 2d       	mov	r23, r0
 28a:	0e 94 ac 01 	call	0x358	; 0x358 <UART_tx>
}
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	bf 91       	pop	r27
 294:	af 91       	pop	r26
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	7f 91       	pop	r23
 29c:	6f 91       	pop	r22
 29e:	5f 91       	pop	r21
 2a0:	4f 91       	pop	r20
 2a2:	3f 91       	pop	r19
 2a4:	2f 91       	pop	r18
 2a6:	0f 90       	pop	r0
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	0f 90       	pop	r0
 2ac:	1f 90       	pop	r1
 2ae:	18 95       	reti

000002b0 <__vector_1>:

// external interrupt (push button) handler
ISR(INT0_vect)
{	
 2b0:	1f 92       	push	r1
 2b2:	0f 92       	push	r0
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	0f 92       	push	r0
 2b8:	11 24       	eor	r1, r1
 2ba:	2f 93       	push	r18
 2bc:	3f 93       	push	r19
 2be:	4f 93       	push	r20
 2c0:	5f 93       	push	r21
 2c2:	6f 93       	push	r22
 2c4:	7f 93       	push	r23
 2c6:	8f 93       	push	r24
 2c8:	9f 93       	push	r25
 2ca:	af 93       	push	r26
 2cc:	bf 93       	push	r27
 2ce:	ef 93       	push	r30
 2d0:	ff 93       	push	r31
	
	press_function();
 2d2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <press_function>
}
 2d6:	ff 91       	pop	r31
 2d8:	ef 91       	pop	r30
 2da:	bf 91       	pop	r27
 2dc:	af 91       	pop	r26
 2de:	9f 91       	pop	r25
 2e0:	8f 91       	pop	r24
 2e2:	7f 91       	pop	r23
 2e4:	6f 91       	pop	r22
 2e6:	5f 91       	pop	r21
 2e8:	4f 91       	pop	r20
 2ea:	3f 91       	pop	r19
 2ec:	2f 91       	pop	r18
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <int_init>:

void int_init(){
	MCUCR|=(1<<ISC00);
 2f8:	85 b7       	in	r24, 0x35	; 53
 2fa:	81 60       	ori	r24, 0x01	; 1
 2fc:	85 bf       	out	0x35, r24	; 53
	SETBIT(GICR,6);
 2fe:	8b b7       	in	r24, 0x3b	; 59
 300:	80 64       	ori	r24, 0x40	; 64
 302:	8b bf       	out	0x3b, r24	; 59
 304:	08 95       	ret

00000306 <timer1_com_int_init>:
}

void timer1_com_int_init(){
	SETBIT(TIMSK,4);
 306:	89 b7       	in	r24, 0x39	; 57
 308:	80 61       	ori	r24, 0x10	; 16
 30a:	89 bf       	out	0x39, r24	; 57
	OCR1A=23437;
 30c:	8d e8       	ldi	r24, 0x8D	; 141
 30e:	9b e5       	ldi	r25, 0x5B	; 91
 310:	9b bd       	out	0x2b, r25	; 43
 312:	8a bd       	out	0x2a, r24	; 42
	TCNT1=0;
 314:	1d bc       	out	0x2d, r1	; 45
 316:	1c bc       	out	0x2c, r1	; 44
	TCCR1B=0b1101;
 318:	8d e0       	ldi	r24, 0x0D	; 13
 31a:	8e bd       	out	0x2e, r24	; 46
 31c:	08 95       	ret

0000031e <main>:
void int_init();

int main(void)
{	
	//initialization 
	ADC0_init();
 31e:	0e 94 49 00 	call	0x92	; 0x92 <ADC0_init>
	int_init();
 322:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <int_init>
	lcd_init();
 326:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_init>
	UART_init();
 32a:	0e 94 a3 01 	call	0x346	; 0x346 <UART_init>
	timer1_com_int_init();
 32e:	0e 94 83 01 	call	0x306	; 0x306 <timer1_com_int_init>
	//direction of LED as output
	SETBIT(DDRD,5);
 332:	8d 9a       	sbi	0x11, 5	; 17
	// enabling the interrupts
	sei();
 334:	78 94       	sei
	// writing the led status for the first time
	lcd_write_cmd(0xC0);
 336:	80 ec       	ldi	r24, 0xC0	; 192
 338:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_write_cmd>
	lcd_write_txt("LED: OFF");
 33c:	86 e7       	ldi	r24, 0x76	; 118
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_write_txt>
 344:	ff cf       	rjmp	.-2      	; 0x344 <main+0x26>

00000346 <UART_init>:
	UCSRC|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
}
uint8_t UART_rx(){
	while(!(UCSRA&(1<<RXC)));
	return UDR;
}
 346:	83 e3       	ldi	r24, 0x33	; 51
 348:	89 b9       	out	0x09, r24	; 9
 34a:	8a b1       	in	r24, 0x0a	; 10
 34c:	88 61       	ori	r24, 0x18	; 24
 34e:	8a b9       	out	0x0a, r24	; 10
 350:	80 b5       	in	r24, 0x20	; 32
 352:	86 68       	ori	r24, 0x86	; 134
 354:	80 bd       	out	0x20, r24	; 32
 356:	08 95       	ret

00000358 <UART_tx>:
void UART_tx(uint8_t data){
	while(!(UCSRA&(1<<UDRE)));
 358:	5d 9b       	sbis	0x0b, 5	; 11
 35a:	fe cf       	rjmp	.-4      	; 0x358 <UART_tx>
	UDR=data;
 35c:	8c b9       	out	0x0c, r24	; 12
 35e:	08 95       	ret

00000360 <__muluhisi3>:
 360:	0e 94 bb 01 	call	0x376	; 0x376 <__umulhisi3>
 364:	a5 9f       	mul	r26, r21
 366:	90 0d       	add	r25, r0
 368:	b4 9f       	mul	r27, r20
 36a:	90 0d       	add	r25, r0
 36c:	a4 9f       	mul	r26, r20
 36e:	80 0d       	add	r24, r0
 370:	91 1d       	adc	r25, r1
 372:	11 24       	eor	r1, r1
 374:	08 95       	ret

00000376 <__umulhisi3>:
 376:	a2 9f       	mul	r26, r18
 378:	b0 01       	movw	r22, r0
 37a:	b3 9f       	mul	r27, r19
 37c:	c0 01       	movw	r24, r0
 37e:	a3 9f       	mul	r26, r19
 380:	70 0d       	add	r23, r0
 382:	81 1d       	adc	r24, r1
 384:	11 24       	eor	r1, r1
 386:	91 1d       	adc	r25, r1
 388:	b2 9f       	mul	r27, r18
 38a:	70 0d       	add	r23, r0
 38c:	81 1d       	adc	r24, r1
 38e:	11 24       	eor	r1, r1
 390:	91 1d       	adc	r25, r1
 392:	08 95       	ret

00000394 <_exit>:
 394:	f8 94       	cli

00000396 <__stop_program>:
 396:	ff cf       	rjmp	.-2      	; 0x396 <__stop_program>
